{{define "GroupPage"}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{.Name}}'s details</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="icon" type="image/jpeg" href="{{.Image}}">

    <link href="https://api.mapbox.com/mapbox-gl-js/v3.9.2/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.9.2/mapbox-gl.js"></script>
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 25vh; bottom: 0; right: 10vh; width: 50%; }
    </style>

</head>
<body>
<header>
    <a href="/"><span class="material-icons">arrow_back</span></a>
    <h1>Welcome to the Group Detail WebPage</h1>
</header>
<main>
    <p>Here you can have all the informations for the chosen group.</p>
    <div class="group1stCard">
        <img class="groupImage" src="{{.Image}}" alt="{{.Name}}">
        <h4 class="groupCreationDate">Creation date : {{.CreationDate}}</h4>
        <h2 class="groupName">{{.Name}}</h2>
    </div>
    <div class="group2ndCard">
        <h3 class="group1stAlbum">First Album date : {{.FirstAlbum}}</h3>
        <h3 class="groupMembers">Members :</h3>
        <ul>
            {{range .Members}}
            <li>{{.}}</li>
            {{end}}
        </ul>
        <h3 class="groupConcerts">Concerts :</h3>
        <ul>
        {{range $location,$date := .Relations.DatesLocations}}
            <li>{{$location}} :
            <ul>
                {{range $date}}
                <li>{{.}}</li>
                {{end}}
            </ul>
            </li>
        {{end}}
        </ul>
    </div>

    <div id="map"></div>
    <script src="https://unpkg.com/@mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>
    <script>
        // Setting up the mapbox accessToken
        mapboxgl.accessToken = 'pk.eyJ1IjoicmFtaWFyZDEyIiwiYSI6ImNtNXBibmE1cTA4bWcybXNpaWg4cWgydDgifQ.eZ661gjAiBWtfYMxXvN9Hw';



        // Setting up the map style
        const map = new mapboxgl.Map({
            // style: 'mapbox://styles/mapbox/outdoors-v12', // mapbox style URL
            style: 'mapbox://styles/ramiard12/cm5y7wkf1000301s9gzem8rp7', // our style URL
            container: 'map', // container ID
            center: [-33.002872,30.973201], // starting position [lng, lat]. Note that lat must be set between -90 and 90
            pitch: 60, // The angle of the map in degrees (0 is straight down)
            bearing: 0,
            zoom: 1, // starting zoom
            projection: 'mercator'
        });

        // Setting up the coordinates for the future markers
        let concertsCoordinates = [];
        {{ range $coordinates := .Relations.Coordinates}}
        concertsCoordinates.push({{$coordinates}});
        {{end}}

        // Transfer the golang 'map' to a javascript 'map'
        let relations = {};
        {{ range $location, $value := .Relations.DatesLocations}}
            relations["{{$location}}"] = {{$value}};
        {{end}}

        // Adding the markers one by one to the map
        let i =0;
        {{ range $location, $value := .Relations.DatesLocations}}
        marker = new mapboxgl.Marker({ color: 'red' })
            .setLngLat(concertsCoordinates[i])
            .setPopup(new mapboxgl.Popup().setHTML("<h2>{{$location}}</h2> <ul>{{range $value}}<li>{{.}}</li>{{end}}</ul>"))
            .addTo(map);
            i++;
        {{end}}

        // Jump to all the locations
        map.on('load', async () => {

            // Set currentPopup to null
            let currentPopup = null;


            for (const coordinate of concertsCoordinates) {
                // Initialize the city and dates variables
                // 'cityName' is the key that correspond to the current index of 'coordinate' in the 'relations' map
                const cityName = Object.keys(relations)[concertsCoordinates.indexOf(coordinate)];
                // 'dates' is an array of all the dates that correspond to the current 'cityName'
                const dates = relations[cityName];

                // If there is a popup, remove it before displaying the new one
                if (currentPopup) {
                    currentPopup.remove();
                    currentPopup = null;
                }

                    map.flyTo({ center: coordinate, zoom: 12 });
                    map.once('moveend', () => {
                        // Create and display popup after flyTo completes
                        currentPopup = new mapboxgl.Popup({ offset: 25 })
                            .setLngLat(coordinate)
                            // Display the current city name and do a range on the dates array to display them in a list
                            .setHTML(`<h3>${cityName}</h3><ul>${dates.map(date => `<li>${date}</li>`).join('')}</ul>`)
                            .addTo(map)
                    });
                    // Wait 10 seconds before moving to the next location
                    await new Promise(resolve => setTimeout(resolve, 10000));
            }
        });


        // Just in case, I keep the old code that was supposed to get the coordinates from the location in javascript
{{/*        {{ range $location, $value := .Relations.DatesLocations}}*/}}

{{/*        mapboxClient.geocoding*/}}
{{/*            .forwardGeocode({*/}}
{{/*                query: '{{$key}}',*/}}
{{/*                autocomplete: false,*/}}
{{/*                limit: 1*/}}
{{/*            })*/}}
{{/*            .send()*/}}
{{/*            .then((response) => {*/}}
{{/*                if (*/}}
{{/*                    !response ||*/}}
{{/*                    !response.body ||*/}}
{{/*                    !response.body.features ||*/}}
{{/*                    !response.body.features.length*/}}
{{/*                ) {*/}}
{{/*                    console.error('Invalid response:');*/}}
{{/*                    console.error(response);*/}}
{{/*                    return;*/}}
{{/*                }*/}}
{{/*                const feature = response.body.features[0];*/}}
{{/*            });*/}}

{{/*        const marker = new mapboxgl.Marker({ color: 'red' })*/}}
{{/*            .setLngLat(feature.center)*/}}
{{/*            .setPopup(new mapboxgl.Popup().setHTML("<h2>{{$location}}</h2> <ul>{{range $value}}<li>{{.}}</li>{{end}}</ul>"))*/}}
{{/*            // .setPopup(popup)*/}}
{{/*            .addTo(map);*/}}

{{/*        {{end}}*/}}
        console.log("Coordonn√©es: ",concertsCoordinates);
    </script>



</main>
<footer>
    <p>&copy; 2023 Groupie Tracker</p>
</footer>
</body>
</html>
{{end}}


{{/*{{define "GroupPage"}}*/}}
{{/*    <!DOCTYPE html>*/}}
{{/*    <html>*/}}
{{/*    <head>*/}}
{{/*        <meta charset="utf-8">*/}}
{{/*        <title>Display a map on a webpage</title>*/}}
{{/*        <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">*/}}
{{/*        <link href="https://api.mapbox.com/mapbox-gl-js/v3.9.2/mapbox-gl.css" rel="stylesheet">*/}}
{{/*        <script src="https://api.mapbox.com/mapbox-gl-js/v3.9.2/mapbox-gl.js"></script>*/}}
{{/*        <style>*/}}
{{/*            body { margin: 0; padding: 0; }*/}}
{{/*            #map { position: absolute; top: 0; bottom: 0; width: 100%; }*/}}
{{/*        </style>*/}}
{{/*    </head>*/}}
{{/*    <body>*/}}
{{/*    {{ range $location, $date := .Relations.DatesLocations }}*/}}
{{/*        <h1>{{$location}}</h1>*/}}
{{/*    {{end}}*/}}
{{/*    <div id="map"></div>*/}}
{{/*    <script src="https://unpkg.com/@mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>*/}}
{{/*    <script>*/}}
{{/*        mapboxgl.accessToken = 'pk.eyJ1IjoicmFtaWFyZDEyIiwiYSI6ImNtNXBibmE1cTA4bWcybXNpaWg4cWgydDgifQ.eZ661gjAiBWtfYMxXvN9Hw';*/}}
{{/*        const mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });*/}}

{{/*                const map = new mapboxgl.Map({*/}}
{{/*                    style: 'mapbox://styles/mapbox/satellite-streets-v11', // style URL*/}}
{{/*                    container: 'map', // container ID*/}}
{{/*                    center: [46.169006, 1.869232], // starting position [lng, lat]. Note that lat must be set between -90 and 90*/}}
{{/*                    zoom: 1, // starting zoom*/}}
{{/*                    projection: 'globe'*/}}
{{/*                });*/}}
{{/*        {{ range $key, $value := .Relations.DatesLocations}}*/}}
{{/*        mapboxClient.geocoding*/}}
{{/*            .forwardGeocode({*/}}
{{/*                query: '{{$key}}',*/}}
{{/*                autocomplete: false,*/}}
{{/*                limit: 1*/}}
{{/*            })*/}}
{{/*            .send()*/}}
{{/*            .then((response) => {*/}}
{{/*                if (*/}}
{{/*                    !response ||*/}}
{{/*                    !response.body ||*/}}
{{/*                    !response.body.features ||*/}}
{{/*                    !response.body.features.length*/}}
{{/*                ) {*/}}
{{/*                    console.error('Invalid response:');*/}}
{{/*                    console.error(response);*/}}
{{/*                    return;*/}}
{{/*                }*/}}
{{/*                const feature = response.body.features[0];*/}}

{{/*                const marker = new mapboxgl.Marker({ color: 'red' })*/}}
{{/*                    .setLngLat(feature.center)*/}}
{{/*                    .setPopup(new mapboxgl.Popup().setHTML("<h2>{{$key}}</h2> <ul>{{range $value}}<li>{{.}}</li>{{end}}</ul>"))*/}}
{{/*                    // .setPopup(popup)*/}}
{{/*                    .addTo(map);*/}}
{{/*            });*/}}
{{/*        {{end}}*/}}
{{/*    </script>*/}}

{{/*    </body>*/}}
{{/*    </html>*/}}
{{/*{{end}}*/}}

{{/*{{ define "GroupPage" }}*/}}
{{/*<!DOCTYPE html>*/}}
{{/*<html>*/}}
{{/*<head>*/}}
{{/*    <meta charset="utf-8">*/}}
{{/*    <title>Add a marker using a place name</title>*/}}
{{/*    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">*/}}
{{/*    <link href="https://api.mapbox.com/mapbox-gl-js/v3.9.2/mapbox-gl.css" rel="stylesheet">*/}}
{{/*    <script src="https://api.mapbox.com/mapbox-gl-js/v3.9.2/mapbox-gl.js"></script>*/}}
{{/*    <style>*/}}
{{/*        body { margin: 0; padding: 0; }*/}}
{{/*        #map { position: absolute; top: 0; bottom: 0; width: 100%; }*/}}
{{/*    </style>*/}}
{{/*</head>*/}}
{{/*<body>*/}}
{{/*<div id="map"></div>*/}}

{{/*<script src="https://unpkg.com/@mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>*/}}

{{/*<script>*/}}
{{/*    mapboxgl.accessToken = 'pk.eyJ1IjoicmFtaWFyZDEyIiwiYSI6ImNtNXBibmE1cTA4bWcybXNpaWg4cWgydDgifQ.eZ661gjAiBWtfYMxXvN9Hw';*/}}
{{/*    const mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });*/}}
{{/*    mapboxClient.geocoding*/}}
{{/*        .forwardGeocode({*/}}
{{/*            query: 'dunedin-new_zealand',*/}}
{{/*            autocomplete: false,*/}}
{{/*            limit: 1*/}}
{{/*        })*/}}
{{/*        .send()*/}}
{{/*        .then((response) => {*/}}
{{/*            if (*/}}
{{/*                !response ||*/}}
{{/*                !response.body ||*/}}
{{/*                !response.body.features ||*/}}
{{/*                !response.body.features.length*/}}
{{/*            ) {*/}}
{{/*                console.error('Invalid response:');*/}}
{{/*                console.error(response);*/}}
{{/*                return;*/}}
{{/*            }*/}}
{{/*            const feature = response.body.features[0];*/}}

{{/*            const map = new mapboxgl.Map({*/}}
{{/*                container: 'map',*/}}
{{/*                // Choose from Mapbox's core styles, or make your own style with Mapbox Studio*/}}
{{/*                style: 'mapbox://styles/mapbox/streets-v12',*/}}
{{/*                center: feature.center,*/}}
{{/*                zoom: 10*/}}
{{/*            });*/}}

{{/*            // Create a marker and add it to the map.*/}}
{{/*            new mapboxgl.Marker().setLngLat(feature.center).addTo(map);*/}}
{{/*        });*/}}
{{/*</script>*/}}

{{/*</body>*/}}
{{/*</html>*/}}
{{/*{{end}}*/}}